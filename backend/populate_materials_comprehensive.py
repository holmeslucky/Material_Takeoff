#!/usr/bin/env python3
"""
Comprehensive Material Database Population
Capitol Engineering Company - Professional Fabrication Materials Database
Target: ~2000 materials matching industry standards
"""

from app.core.database import SessionLocal, Base, engine
from app.models.material import Material
import math

def create_tables():
    """Create database tables"""
    Base.metadata.create_all(bind=engine)
    print("Database tables created successfully")

def clear_existing_materials():
    """Clear existing materials"""
    db = SessionLocal()
    try:
        db.query(Material).delete()
        db.commit()
        print("Cleared existing materials")
    finally:
        db.close()

def add_material(db, shape_key, description, category, weight_per_ft, 
                depth_inches=None, width_inches=None, thickness_inches=None,
                unit_price_per_cwt=85.0, commonly_used=True):
    """Add a material to the database"""
    material = Material(
        shape_key=shape_key,
        description=description,
        category=category,
        material_type="Steel",
        grade="A992" if category == "Wide Flange" else "A36",
        weight_per_ft=weight_per_ft,
        depth_inches=depth_inches,
        width_inches=width_inches,
        thickness_inches=thickness_inches,
        unit_price_per_cwt=unit_price_per_cwt,
        supplier="Capitol Steel Supply",
        commonly_used=commonly_used,
        usage_count=0
    )
    db.add(material)
    return material

def populate_wide_flange_comprehensive(db):
    """Populate comprehensive wide flange beams - all AISC standard sizes"""
    print("Populating Comprehensive Wide Flange Beams...")
    
    # Complete AISC Wide Flange database
    wf_data = [
        # W4 Series
        ("W4X13", 4.16, 4.060, 0.345, 13.0),
        
        # W5 Series
        ("W5X16", 5.01, 5.000, 0.360, 16.0),
        ("W5X19", 5.15, 5.030, 0.430, 19.0),
        
        # W6 Series
        ("W6X9", 5.90, 3.940, 0.215, 9.0),
        ("W6X12", 6.03, 4.000, 0.280, 12.0),
        ("W6X15", 5.99, 5.990, 0.230, 15.0),
        ("W6X16", 6.28, 4.030, 0.405, 16.0),
        ("W6X20", 6.20, 6.018, 0.367, 20.0),
        ("W6X25", 6.38, 6.080, 0.455, 25.0),
        
        # W8 Series - Complete
        ("W8X10", 7.89, 3.940, 0.170, 10.0),
        ("W8X13", 7.99, 4.000, 0.230, 13.0),
        ("W8X15", 8.11, 4.015, 0.315, 15.0),
        ("W8X18", 8.14, 5.250, 0.230, 18.0),
        ("W8X21", 8.28, 5.270, 0.400, 21.0),
        ("W8X24", 7.93, 6.495, 0.245, 24.0),
        ("W8X28", 8.06, 6.535, 0.285, 28.0),
        ("W8X31", 8.00, 7.995, 0.285, 31.0),
        ("W8X35", 8.12, 8.020, 0.310, 35.0),
        ("W8X40", 8.25, 8.070, 0.360, 40.0),
        ("W8X48", 8.50, 8.110, 0.400, 48.0),
        ("W8X58", 8.75, 8.220, 0.510, 58.0),
        ("W8X67", 9.00, 8.280, 0.570, 67.0),
        
        # W10 Series - Complete
        ("W10X12", 9.87, 3.960, 0.190, 12.0),
        ("W10X15", 9.99, 4.000, 0.230, 15.0),
        ("W10X17", 10.11, 4.010, 0.330, 17.0),
        ("W10X19", 10.24, 4.020, 0.395, 19.0),
        ("W10X22", 10.17, 5.750, 0.240, 22.0),
        ("W10X26", 10.33, 5.770, 0.440, 26.0),
        ("W10X30", 10.47, 5.810, 0.510, 30.0),
        ("W10X33", 9.73, 7.960, 0.290, 33.0),
        ("W10X39", 9.92, 7.985, 0.315, 39.0),
        ("W10X45", 10.10, 8.020, 0.350, 45.0),
        ("W10X49", 9.98, 10.000, 0.340, 49.0),
        ("W10X54", 10.09, 10.030, 0.370, 54.0),
        ("W10X60", 10.22, 10.080, 0.420, 60.0),
        ("W10X68", 10.40, 10.130, 0.470, 68.0),
        ("W10X77", 10.60, 10.190, 0.530, 77.0),
        ("W10X88", 10.84, 10.265, 0.605, 88.0),
        ("W10X100", 11.10, 10.340, 0.680, 100.0),
        ("W10X112", 11.36, 10.415, 0.755, 112.0),
        
        # W12 Series - Complete
        ("W12X14", 11.91, 3.970, 0.200, 14.0),
        ("W12X16", 11.99, 3.990, 0.220, 16.0),
        ("W12X19", 12.16, 4.005, 0.235, 19.0),
        ("W12X22", 12.31, 4.030, 0.260, 22.0),
        ("W12X26", 12.22, 6.490, 0.230, 26.0),
        ("W12X30", 12.34, 6.520, 0.260, 30.0),
        ("W12X35", 12.50, 6.560, 0.300, 35.0),
        ("W12X40", 11.94, 8.005, 0.295, 40.0),
        ("W12X45", 12.06, 8.045, 0.335, 45.0),
        ("W12X50", 12.19, 8.080, 0.370, 50.0),
        ("W12X53", 12.06, 10.000, 0.345, 53.0),
        ("W12X58", 12.19, 10.010, 0.360, 58.0),
        ("W12X65", 12.12, 12.000, 0.390, 65.0),
        ("W12X72", 12.25, 12.040, 0.430, 72.0),
        ("W12X79", 12.38, 12.080, 0.470, 79.0),
        ("W12X87", 12.53, 12.125, 0.515, 87.0),
        ("W12X96", 12.71, 12.160, 0.550, 96.0),
        ("W12X106", 12.89, 12.220, 0.610, 106.0),
        ("W12X120", 13.12, 12.320, 0.710, 120.0),
        ("W12X136", 13.41, 12.400, 0.790, 136.0),
        ("W12X152", 13.71, 12.480, 0.870, 152.0),
        ("W12X170", 14.03, 12.570, 0.960, 170.0),
        ("W12X190", 14.38, 12.670, 1.060, 190.0),
        ("W12X210", 14.71, 12.750, 1.140, 210.0),
        ("W12X230", 15.05, 12.855, 1.220, 230.0),
        ("W12X262", 15.59, 13.000, 1.400, 262.0),
        ("W12X279", 15.85, 13.090, 1.530, 279.0),
        ("W12X305", 16.32, 13.235, 1.625, 305.0),
        ("W12X336", 16.82, 13.385, 1.775, 336.0),
        
        # W14 Series - Complete
        ("W14X22", 13.74, 5.000, 0.230, 22.0),
        ("W14X26", 13.91, 5.025, 0.255, 26.0),
        ("W14X30", 13.84, 6.730, 0.270, 30.0),
        ("W14X34", 13.98, 6.745, 0.285, 34.0),
        ("W14X38", 14.10, 6.770, 0.310, 38.0),
        ("W14X43", 13.66, 7.995, 0.305, 43.0),
        ("W14X48", 13.79, 8.030, 0.340, 48.0),
        ("W14X53", 13.92, 8.060, 0.370, 53.0),
        ("W14X61", 13.89, 9.995, 0.375, 61.0),
        ("W14X68", 14.04, 10.035, 0.415, 68.0),
        ("W14X74", 14.17, 10.070, 0.450, 74.0),
        ("W14X82", 14.31, 10.130, 0.510, 82.0),
        ("W14X90", 14.02, 14.520, 0.440, 90.0),
        ("W14X99", 14.16, 14.565, 0.485, 99.0),
        ("W14X109", 14.32, 14.605, 0.525, 109.0),
        ("W14X120", 14.48, 14.670, 0.590, 120.0),
        ("W14X132", 14.66, 14.725, 0.645, 132.0),
        ("W14X145", 14.78, 15.500, 0.680, 145.0),
        ("W14X159", 15.00, 15.565, 0.745, 159.0),
        ("W14X176", 15.22, 15.650, 0.830, 176.0),
        ("W14X193", 15.48, 15.710, 0.890, 193.0),
        ("W14X211", 15.72, 15.800, 0.980, 211.0),
        ("W14X233", 16.04, 15.890, 1.070, 233.0),
        ("W14X257", 16.38, 15.995, 1.175, 257.0),
        ("W14X283", 16.74, 16.110, 1.290, 283.0),
        ("W14X311", 17.12, 16.230, 1.410, 311.0),
        ("W14X342", 17.54, 16.360, 1.540, 342.0),
        ("W14X370", 17.92, 16.475, 1.655, 370.0),
        ("W14X398", 18.29, 16.590, 1.770, 398.0),
        ("W14X426", 18.67, 16.695, 1.875, 426.0),
        ("W14X455", 19.02, 16.835, 2.015, 455.0),
        ("W14X500", 19.60, 17.010, 2.190, 500.0),
        ("W14X550", 20.24, 17.200, 2.380, 550.0),
        ("W14X605", 20.92, 17.415, 2.595, 605.0),
        ("W14X665", 21.64, 17.650, 2.830, 665.0),
        ("W14X730", 22.42, 17.890, 3.070, 730.0),
        
        # W16, W18, W21, W24, W27, W30, W33, W36, W40, W44 series continue...
        # Adding key sizes from each series
        ("W16X26", 15.69, 5.500, 0.250, 26.0),
        ("W16X31", 15.88, 5.525, 0.275, 31.0),
        ("W16X36", 15.86, 6.995, 0.295, 36.0),
        ("W16X40", 16.01, 7.000, 0.305, 40.0),
        ("W16X45", 16.13, 7.035, 0.345, 45.0),
        ("W16X50", 16.26, 7.070, 0.380, 50.0),
        ("W16X57", 16.43, 7.120, 0.430, 57.0),
        ("W16X67", 16.33, 10.235, 0.395, 67.0),
        ("W16X77", 16.52, 10.295, 0.455, 77.0),
        ("W16X89", 16.75, 10.365, 0.525, 89.0),
        ("W16X100", 16.97, 10.425, 0.585, 100.0),
        
        ("W18X35", 17.70, 6.000, 0.300, 35.0),
        ("W18X40", 17.90, 6.015, 0.315, 40.0),
        ("W18X46", 18.06, 6.060, 0.360, 46.0),
        ("W18X50", 17.99, 7.495, 0.355, 50.0),
        ("W18X55", 18.11, 7.530, 0.390, 55.0),
        ("W18X60", 18.24, 7.555, 0.415, 60.0),
        ("W18X65", 18.35, 7.590, 0.450, 65.0),
        ("W18X71", 18.47, 7.635, 0.495, 71.0),
        ("W18X76", 18.21, 11.035, 0.425, 76.0),
        ("W18X86", 18.39, 11.090, 0.480, 86.0),
        ("W18X97", 18.59, 11.145, 0.535, 97.0),
        ("W18X106", 18.73, 11.200, 0.590, 106.0),
        ("W18X119", 18.97, 11.265, 0.655, 119.0),
        
        ("W21X44", 20.66, 6.500, 0.350, 44.0),
        ("W21X50", 20.83, 6.530, 0.380, 50.0),
        ("W21X57", 21.06, 6.555, 0.405, 57.0),
        ("W21X62", 20.99, 8.240, 0.400, 62.0),
        ("W21X68", 21.13, 8.270, 0.430, 68.0),
        ("W21X73", 21.24, 8.295, 0.455, 73.0),
        ("W21X83", 21.43, 8.355, 0.515, 83.0),
        ("W21X93", 21.62, 8.420, 0.580, 93.0),
        ("W21X101", 21.36, 12.290, 0.500, 101.0),
        ("W21X111", 21.51, 12.340, 0.550, 111.0),
        ("W21X122", 21.68, 12.390, 0.600, 122.0),
        ("W21X132", 21.83, 12.440, 0.650, 132.0),
        
        ("W24X55", 23.57, 7.005, 0.395, 55.0),
        ("W24X62", 23.74, 7.040, 0.430, 62.0),
        ("W24X68", 23.73, 8.965, 0.415, 68.0),
        ("W24X76", 23.92, 8.990, 0.440, 76.0),
        ("W24X84", 24.10, 9.020, 0.470, 84.0),
        ("W24X94", 24.31, 9.065, 0.515, 94.0),
        ("W24X104", 24.06, 12.750, 0.500, 104.0),
        ("W24X117", 24.26, 12.800, 0.550, 117.0),
        ("W24X131", 24.48, 12.855, 0.605, 131.0),
        ("W24X146", 24.74, 12.900, 0.650, 146.0),
        ("W24X162", 25.00, 12.955, 0.705, 162.0),
        
        ("W27X84", 26.71, 9.960, 0.460, 84.0),
        ("W27X94", 26.92, 9.990, 0.490, 94.0),
        ("W27X102", 27.09, 10.015, 0.515, 102.0),
        ("W27X114", 27.29, 10.070, 0.570, 114.0),
        ("W27X129", 27.63, 10.110, 0.610, 129.0),
        ("W27X146", 27.38, 13.965, 0.605, 146.0),
        ("W27X161", 27.59, 14.020, 0.660, 161.0),
        ("W27X178", 27.81, 14.085, 0.725, 178.0),
        
        ("W30X90", 29.53, 10.398, 0.470, 90.0),
        ("W30X99", 29.65, 10.450, 0.520, 99.0),
        ("W30X108", 29.83, 10.475, 0.545, 108.0),
        ("W30X116", 30.01, 10.500, 0.565, 116.0),
        ("W30X124", 30.17, 10.515, 0.585, 124.0),
        ("W30X132", 30.31, 10.545, 0.615, 132.0),
        ("W30X148", 30.67, 10.630, 0.650, 148.0),
        ("W30X173", 30.44, 15.040, 0.655, 173.0),
        ("W30X191", 30.68, 15.100, 0.710, 191.0),
        ("W30X211", 30.94, 15.155, 0.775, 211.0),
        
        ("W33X118", 32.86, 11.480, 0.550, 118.0),
        ("W33X130", 33.09, 11.510, 0.580, 130.0),
        ("W33X141", 33.30, 11.535, 0.605, 141.0),
        ("W33X152", 33.49, 11.565, 0.635, 152.0),
        ("W33X169", 33.82, 11.620, 0.670, 169.0),
        ("W33X201", 33.68, 15.745, 0.715, 201.0),
        ("W33X221", 33.93, 15.805, 0.775, 221.0),
        ("W33X241", 34.18, 15.860, 0.830, 241.0),
        
        ("W36X135", 35.55, 11.950, 0.600, 135.0),
        ("W36X150", 35.85, 11.975, 0.625, 150.0),
        ("W36X160", 36.01, 12.000, 0.650, 160.0),
        ("W36X170", 36.17, 12.030, 0.680, 170.0),
        ("W36X182", 36.33, 12.075, 0.725, 182.0),
        ("W36X194", 36.49, 12.115, 0.765, 194.0),
        ("W36X210", 36.69, 12.180, 0.830, 210.0),
        ("W36X230", 35.90, 16.470, 0.760, 230.0),
        ("W36X245", 36.08, 16.510, 0.800, 245.0),
        ("W36X260", 36.26, 16.550, 0.840, 260.0),
        ("W36X280", 36.52, 16.595, 0.885, 280.0),
        ("W36X300", 36.74, 16.655, 0.945, 300.0),
        ("W36X330", 37.12, 16.770, 1.060, 330.0),
        ("W36X359", 37.47, 16.875, 1.165, 359.0),
        ("W36X393", 37.82, 17.010, 1.300, 393.0),
        
        ("W40X149", 38.20, 11.810, 0.630, 149.0),
        ("W40X167", 38.60, 11.900, 0.650, 167.0),
        ("W40X183", 39.02, 11.940, 0.690, 183.0),
        ("W40X199", 39.41, 11.980, 0.730, 199.0),
        ("W40X215", 39.77, 12.020, 0.770, 215.0),
        ("W40X235", 40.16, 12.080, 0.830, 235.0),
        ("W40X249", 39.72, 17.090, 0.830, 249.0),
        ("W40X264", 39.91, 17.130, 0.870, 264.0),
        ("W40X278", 40.09, 17.170, 0.910, 278.0),
        ("W40X297", 40.32, 17.220, 0.960, 297.0),
        ("W40X324", 40.71, 17.320, 1.060, 324.0),
        ("W40X362", 41.22, 17.470, 1.210, 362.0),
        ("W40X392", 41.59, 17.590, 1.330, 392.0),
        ("W40X431", 42.07, 17.750, 1.490, 431.0),
        
        ("W44X230", 42.92, 15.750, 0.710, 230.0),
        ("W44X262", 43.31, 15.840, 0.800, 262.0),
        ("W44X290", 43.62, 15.930, 0.890, 290.0),
        ("W44X335", 44.02, 16.130, 1.030, 335.0),
    ]
    
    count = 0
    for shape_key, depth, width, thickness, weight in wf_data:
        desc = f"Wide Flange Beam {shape_key} - {weight} lb/ft"
        add_material(db, shape_key, desc, "Wide Flange", weight, 
                    depth, width, thickness, 85.0 + (weight * 0.1))
        count += 1
    
    print(f"   Added {count} wide flange beams")
    return count

def populate_plates_comprehensive(db):
    """Populate comprehensive plate materials"""
    print("Populating Comprehensive Plate Materials...")
    
    # Comprehensive plate thickness and width combinations
    thicknesses = [0.1875, 0.25, 0.3125, 0.375, 0.4375, 0.5, 0.5625, 0.625, 0.6875, 0.75, 0.8125, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625, 1.75, 1.875, 2.0, 2.25, 2.5, 2.75, 3.0, 3.25, 3.5, 3.75, 4.0, 4.5, 5.0, 5.5, 6.0]
    widths = [4, 5, 6, 8, 10, 12, 16, 18, 20, 24, 30, 36, 48, 60, 72, 84, 96, 120, 144]
    
    # Steel density: 489.6 lb/cu ft
    steel_density_pcf = 489.6
    
    count = 0
    for thickness in thicknesses:
        for width in widths:
            # Create shape key
            if thickness < 1.0:
                if thickness == 0.1875:
                    thick_str = "3/16"
                elif thickness == 0.25:
                    thick_str = "1/4"
                elif thickness == 0.3125:
                    thick_str = "5/16"
                elif thickness == 0.375:
                    thick_str = "3/8"
                elif thickness == 0.4375:
                    thick_str = "7/16"
                elif thickness == 0.5:
                    thick_str = "1/2"
                elif thickness == 0.5625:
                    thick_str = "9/16"
                elif thickness == 0.625:
                    thick_str = "5/8"
                elif thickness == 0.6875:
                    thick_str = "11/16"
                elif thickness == 0.75:
                    thick_str = "3/4"
                elif thickness == 0.8125:
                    thick_str = "13/16"
                elif thickness == 0.875:
                    thick_str = "7/8"
                else:
                    thick_str = str(thickness)
            else:
                if thickness == int(thickness):
                    thick_str = str(int(thickness))
                else:
                    thick_str = str(thickness)
            
            shape_key = f"PL{thick_str}X{width}"
            
            # Calculate weight per square foot
            weight_per_sq_ft = (thickness / 12.0) * steel_density_pcf
            
            desc = f"Steel Plate {thick_str}\" thick x {width}\" wide - {weight_per_sq_ft:.1f} lb/sq ft"
            
            # For plates, we store weight per square foot in weight_per_ft field
            add_material(db, shape_key, desc, "Plate", weight_per_sq_ft,
                        thickness_inches=thickness, width_inches=width,
                        unit_price_per_cwt=82.0 + (thickness * 2.0))
            count += 1
    
    print(f"   Added {count} plate materials")
    return count

def populate_angles_comprehensive(db):
    """Populate comprehensive angle materials"""
    print("Populating Comprehensive Angle Materials...")
    
    # Equal leg angles
    equal_angles = [
        # (leg_size, thickness, weight_per_ft)
        (1.25, 0.125, 0.80), (1.25, 0.1875, 1.16),
        (1.5, 0.125, 0.94), (1.5, 0.1875, 1.44), (1.5, 0.25, 1.80),
        (2.0, 0.125, 1.23), (2.0, 0.1875, 1.83), (2.0, 0.25, 2.44), (2.0, 0.3125, 3.19),
        (2.5, 0.1875, 2.34), (2.5, 0.25, 3.07), (2.5, 0.3125, 3.86), (2.5, 0.375, 4.70),
        (3.0, 0.1875, 2.75), (3.0, 0.25, 3.71), (3.0, 0.3125, 4.70), (3.0, 0.375, 5.60), (3.0, 0.5, 7.20),
        (3.5, 0.25, 4.36), (3.5, 0.3125, 5.40), (3.5, 0.375, 6.60), (3.5, 0.5, 8.50),
        (4.0, 0.25, 4.9), (4.0, 0.3125, 6.2), (4.0, 0.375, 7.7), (4.0, 0.5, 9.8), (4.0, 0.625, 12.3),
        (5.0, 0.3125, 7.7), (5.0, 0.375, 9.4), (5.0, 0.5, 12.0), (5.0, 0.625, 15.3), (5.0, 0.75, 18.5),
        (6.0, 0.375, 11.2), (6.0, 0.5, 14.9), (6.0, 0.625, 18.5), (6.0, 0.75, 22.1), (6.0, 0.875, 25.7),
        (7.0, 0.375, 13.6), (7.0, 0.5, 17.9), (7.0, 0.625, 22.1), (7.0, 0.75, 26.2), (7.0, 0.875, 30.6),
        (8.0, 0.5, 20.9), (8.0, 0.625, 26.4), (8.0, 0.75, 32.7), (8.0, 0.875, 38.9), (8.0, 1.125, 51.0),
    ]
    
    count = 0
    for leg_size, thickness, weight in equal_angles:
        leg_str = str(leg_size) if leg_size == int(leg_size) else str(leg_size)
        thick_str = str(thickness) if thickness >= 0.25 else f"{thickness:.4f}".rstrip('0').rstrip('.')
        shape_key = f"L{leg_str}X{leg_str}X{thick_str}"
        desc = f"Equal Leg Angle {shape_key} - {weight} lb/ft"
        add_material(db, shape_key, desc, "Angle", weight, 
                    depth_inches=leg_size, width_inches=leg_size, thickness_inches=thickness,
                    unit_price_per_cwt=88.0)
        count += 1
    
    # Unequal leg angles
    unequal_angles = [
        # (long_leg, short_leg, thickness, weight_per_ft)
        (2.0, 1.5, 0.125, 1.05), (2.0, 1.5, 0.1875, 1.56), (2.0, 1.5, 0.25, 2.08),
        (2.5, 1.5, 0.125, 1.15), (2.5, 1.5, 0.1875, 1.77), (2.5, 1.5, 0.25, 2.34),
        (2.5, 2.0, 0.1875, 2.06), (2.5, 2.0, 0.25, 2.75), (2.5, 2.0, 0.3125, 3.46),
        (3.0, 2.0, 0.1875, 2.25), (3.0, 2.0, 0.25, 3.05), (3.0, 2.0, 0.3125, 3.86), (3.0, 2.0, 0.375, 4.70),
        (3.0, 2.5, 0.1875, 2.56), (3.0, 2.5, 0.25, 3.39), (3.0, 2.5, 0.3125, 4.22), (3.0, 2.5, 0.375, 5.10),
        (3.5, 2.5, 0.25, 3.71), (3.5, 2.5, 0.3125, 4.70), (3.5, 2.5, 0.375, 5.60), (3.5, 2.5, 0.5, 7.20),
        (4.0, 3.0, 0.25, 4.36), (4.0, 3.0, 0.3125, 5.40), (4.0, 3.0, 0.375, 6.60), (4.0, 3.0, 0.5, 8.50),
        (4.0, 3.5, 0.3125, 5.8), (4.0, 3.5, 0.375, 6.9), (4.0, 3.5, 0.5, 9.1),
        (5.0, 3.0, 0.3125, 6.60), (5.0, 3.0, 0.375, 7.90), (5.0, 3.0, 0.5, 10.4), (5.0, 3.0, 0.625, 12.8),
        (5.0, 3.5, 0.375, 8.70), (5.0, 3.5, 0.5, 11.3), (5.0, 3.5, 0.625, 14.0), (5.0, 3.5, 0.75, 16.8),
        (6.0, 3.5, 0.375, 9.8), (6.0, 3.5, 0.5, 12.3), (6.0, 3.5, 0.625, 15.3), (6.0, 3.5, 0.75, 18.1),
        (6.0, 4.0, 0.375, 10.3), (6.0, 4.0, 0.5, 13.6), (6.0, 4.0, 0.625, 16.2), (6.0, 4.0, 0.75, 19.6),
        (7.0, 4.0, 0.375, 11.4), (7.0, 4.0, 0.5, 15.3), (7.0, 4.0, 0.625, 18.9), (7.0, 4.0, 0.75, 22.1),
        (8.0, 4.0, 0.5, 16.7), (8.0, 4.0, 0.625, 20.2), (8.0, 4.0, 0.75, 24.2), (8.0, 4.0, 0.875, 27.9),
        (8.0, 6.0, 0.5, 19.6), (8.0, 6.0, 0.625, 24.5), (8.0, 6.0, 0.75, 29.7), (8.0, 6.0, 0.875, 33.8),
    ]
    
    for long_leg, short_leg, thickness, weight in unequal_angles:
        long_str = str(long_leg) if long_leg == int(long_leg) else str(long_leg)
        short_str = str(short_leg) if short_leg == int(short_leg) else str(short_leg)
        thick_str = str(thickness) if thickness >= 0.25 else f"{thickness:.4f}".rstrip('0').rstrip('.')
        shape_key = f"L{long_str}X{short_str}X{thick_str}"
        desc = f"Unequal Leg Angle {shape_key} - {weight} lb/ft"
        add_material(db, shape_key, desc, "Angle", weight,
                    depth_inches=long_leg, width_inches=short_leg, thickness_inches=thickness,
                    unit_price_per_cwt=88.0)
        count += 1
    
    print(f"   Added {count} angle materials")
    return count

def populate_channels_comprehensive(db):
    """Populate comprehensive channel materials"""
    print("Populating Comprehensive Channel Materials...")
    
    # American Standard Channels (C shapes)
    channels = [
        # (designation, depth, flange_width, weight)
        ("C3X4.1", 3.0, 1.596, 4.1), ("C3X5", 3.0, 1.498, 5.0), ("C3X6", 3.0, 1.596, 6.0),
        ("C4X5.4", 4.0, 1.584, 5.4), ("C4X7.25", 4.0, 1.720, 7.25),
        ("C5X6.7", 5.0, 1.750, 6.7), ("C5X9", 5.0, 1.885, 9.0),
        ("C6X8.2", 6.0, 1.920, 8.2), ("C6X10.5", 6.0, 2.034, 10.5), ("C6X13", 6.0, 2.157, 13.0),
        ("C7X9.8", 7.0, 2.090, 9.8), ("C7X12.25", 7.0, 2.194, 12.25), ("C7X14.75", 7.0, 2.299, 14.75),
        ("C8X11.5", 8.0, 2.260, 11.5), ("C8X13.75", 8.0, 2.343, 13.75), ("C8X18.75", 8.0, 2.527, 18.75),
        ("C9X13.4", 9.0, 2.433, 13.4), ("C9X15", 9.0, 2.485, 15.0), ("C9X20", 9.0, 2.648, 20.0),
        ("C10X15.3", 10.0, 2.600, 15.3), ("C10X20", 10.0, 2.739, 20.0), ("C10X25", 10.0, 2.886, 25.0), ("C10X30", 10.0, 3.033, 30.0),
        ("C12X20.7", 12.0, 2.942, 20.7), ("C12X25", 12.0, 3.047, 25.0), ("C12X30", 12.0, 3.170, 30.0),
        ("C15X33.9", 15.0, 3.400, 33.9), ("C15X40", 15.0, 3.520, 40.0), ("C15X50", 15.0, 3.716, 50.0),
        
        # Miscellaneous Channels (MC shapes)
        ("MC3X7.1", 3.0, 1.949, 7.1), ("MC4X13.8", 4.0, 2.497, 13.8),
        ("MC6X12", 6.0, 3.500, 12.0), ("MC6X15.1", 6.0, 3.500, 15.1), ("MC6X16.3", 6.0, 3.500, 16.3), ("MC6X18", 6.0, 3.500, 18.0),
        ("MC7X19.1", 7.0, 3.452, 19.1), ("MC7X22.7", 7.0, 3.603, 22.7),
        ("MC8X18.7", 8.0, 3.502, 18.7), ("MC8X21.4", 8.0, 3.450, 21.4), ("MC8X22.8", 8.0, 3.502, 22.8),
        ("MC9X23.9", 9.0, 3.450, 23.9), ("MC9X25.4", 9.0, 3.500, 25.4),
        ("MC10X22", 10.0, 3.315, 22.0), ("MC10X25", 10.0, 3.405, 25.0), ("MC10X28.5", 10.0, 3.505, 28.5), ("MC10X33.6", 10.0, 3.670, 33.6), ("MC10X41.1", 10.0, 4.321, 41.1),
        ("MC12X31", 12.0, 3.671, 31.0), ("MC12X35", 12.0, 3.671, 35.0), ("MC12X40", 12.0, 3.890, 40.0), ("MC12X45", 12.0, 3.890, 45.0), ("MC12X50", 12.0, 4.135, 50.0),
        ("MC13X31.8", 13.0, 4.000, 31.8), ("MC13X35", 13.0, 4.000, 35.0), ("MC13X40", 13.0, 4.185, 40.0), ("MC13X50", 13.0, 4.412, 50.0),
        ("MC18X42.7", 18.0, 3.950, 42.7), ("MC18X45.8", 18.0, 4.000, 45.8), ("MC18X51.9", 18.0, 4.100, 51.9), ("MC18X58", 18.0, 4.200, 58.0),
    ]
    
    count = 0
    for designation, depth, flange_width, weight in channels:
        desc = f"American Standard Channel {designation} - {weight} lb/ft"
        add_material(db, designation, desc, "Channel", weight,
                    depth_inches=depth, width_inches=flange_width,
                    unit_price_per_cwt=87.0)
        count += 1
    
    print(f"   Added {count} channel materials")
    return count

def populate_hss_comprehensive(db):
    """Populate comprehensive HSS (Hollow Structural Section) materials"""
    print("Populating Comprehensive HSS Materials...")
    
    # HSS Round (Circular)
    round_hss = [
        # (outside_diameter, wall_thickness, weight_per_ft)
        (1.315, 0.095, 1.13), (1.315, 0.133, 1.50), (1.315, 0.179, 1.88),
        (1.660, 0.109, 1.61), (1.660, 0.140, 1.99), (1.660, 0.191, 2.58),
        (1.900, 0.109, 1.84), (1.900, 0.145, 2.40), (1.900, 0.200, 3.19),
        (2.375, 0.109, 2.33), (2.375, 0.154, 3.20), (2.375, 0.218, 4.32), (2.375, 0.344, 6.50),
        (2.875, 0.134, 3.45), (2.875, 0.203, 5.02), (2.875, 0.276, 6.45), (2.875, 0.375, 8.52),
        (3.500, 0.134, 4.21), (3.500, 0.216, 6.60), (3.500, 0.300, 8.98), (3.500, 0.438, 12.73),
        (4.000, 0.125, 4.51), (4.000, 0.188, 6.66), (4.000, 0.237, 8.25), (4.000, 0.337, 11.50), (4.000, 0.500, 16.51),
        (4.500, 0.188, 7.58), (4.500, 0.237, 9.35), (4.500, 0.337, 12.96), (4.500, 0.500, 18.58),
        (5.000, 0.188, 8.51), (5.000, 0.258, 11.00), (5.000, 0.375, 15.62), (5.000, 0.500, 20.66),
        (5.563, 0.188, 9.46), (5.563, 0.258, 12.23), (5.563, 0.375, 17.32), (5.563, 0.500, 22.73),
        (6.625, 0.188, 11.33), (6.625, 0.280, 15.96), (6.625, 0.432, 23.87), (6.625, 0.500, 27.24),
        (8.625, 0.188, 14.81), (8.625, 0.250, 19.32), (8.625, 0.322, 24.34), (8.625, 0.500, 36.69),
        (10.750, 0.188, 18.55), (10.750, 0.250, 24.20), (10.750, 0.365, 34.24), (10.750, 0.500, 45.81),
        (12.750, 0.188, 22.13), (12.750, 0.250, 28.89), (12.750, 0.375, 42.05), (12.750, 0.500, 54.85),
    ]
    
    count = 0
    for od, wall, weight in round_hss:
        od_str = f"{od:.3f}".rstrip('0').rstrip('.')
        wall_str = f"{wall:.3f}".rstrip('0').rstrip('.')
        designation = f"HSS{od_str}X{wall_str}"
        desc = f"Round HSS {designation} - {weight} lb/ft"
        add_material(db, designation, desc, "HSS", weight,
                    depth_inches=od, width_inches=od, thickness_inches=wall,
                    unit_price_per_cwt=92.0)
        count += 1
    
    # HSS Square
    square_hss = [
        # (outside_dimension, wall_thickness, weight_per_ft)
        (1.5, 0.125, 1.78), (1.5, 0.188, 2.59),
        (2.0, 0.125, 2.38), (2.0, 0.188, 3.48), (2.0, 0.250, 4.52),
        (2.5, 0.125, 2.99), (2.5, 0.188, 4.37), (2.5, 0.250, 5.70), (2.5, 0.312, 7.02),
        (3.0, 0.125, 3.60), (3.0, 0.188, 5.27), (3.0, 0.250, 6.87), (3.0, 0.312, 8.45),
        (3.5, 0.188, 6.16), (3.5, 0.250, 8.04), (3.5, 0.312, 9.89), (3.5, 0.375, 11.7),
        (4.0, 0.188, 7.05), (4.0, 0.250, 9.21), (4.0, 0.312, 11.32), (4.0, 0.375, 13.4), (4.0, 0.500, 17.3),
        (5.0, 0.188, 8.83), (5.0, 0.250, 11.55), (5.0, 0.312, 14.20), (5.0, 0.375, 16.8), (5.0, 0.500, 21.6),
        (6.0, 0.188, 10.61), (6.0, 0.250, 13.89), (6.0, 0.312, 17.08), (6.0, 0.375, 20.2), (6.0, 0.500, 25.8), (6.0, 0.625, 31.8),
        (7.0, 0.250, 16.23), (7.0, 0.312, 19.96), (7.0, 0.375, 23.6), (7.0, 0.500, 30.1), (7.0, 0.625, 37.0),
        (8.0, 0.250, 18.57), (8.0, 0.312, 22.84), (8.0, 0.375, 27.0), (8.0, 0.500, 34.4), (8.0, 0.625, 42.3),
        (10.0, 0.250, 23.25), (10.0, 0.312, 28.60), (10.0, 0.375, 33.8), (10.0, 0.500, 43.0), (10.0, 0.625, 52.7),
        (12.0, 0.250, 27.93), (12.0, 0.312, 34.36), (12.0, 0.375, 40.6), (12.0, 0.500, 51.7), (12.0, 0.625, 63.4),
    ]
    
    for od, wall, weight in square_hss:
        od_str = f"{od:.1f}".rstrip('0').rstrip('.')
        wall_str = f"{wall:.3f}".rstrip('0').rstrip('.')
        designation = f"HSS{od_str}X{od_str}X{wall_str}"
        desc = f"Square HSS {designation} - {weight} lb/ft"
        add_material(db, designation, desc, "HSS", weight,
                    depth_inches=od, width_inches=od, thickness_inches=wall,
                    unit_price_per_cwt=92.0)
        count += 1
    
    # HSS Rectangular
    rectangular_hss = [
        # (depth, width, wall_thickness, weight_per_ft)
        (2.0, 1.0, 0.125, 1.78), (2.0, 1.0, 0.188, 2.59),
        (2.5, 1.5, 0.125, 2.38), (2.5, 1.5, 0.188, 3.48), (2.5, 1.5, 0.250, 4.52),
        (3.0, 1.5, 0.125, 2.69), (3.0, 1.5, 0.188, 3.96), (3.0, 1.5, 0.250, 5.18),
        (3.0, 2.0, 0.125, 2.99), (3.0, 2.0, 0.188, 4.37), (3.0, 2.0, 0.250, 5.70), (3.0, 2.0, 0.312, 7.02),
        (3.5, 2.5, 0.188, 5.27), (3.5, 2.5, 0.250, 6.87), (3.5, 2.5, 0.312, 8.45),
        (4.0, 2.0, 0.125, 3.60), (4.0, 2.0, 0.188, 5.27), (4.0, 2.0, 0.250, 6.87), (4.0, 2.0, 0.312, 8.45),
        (4.0, 3.0, 0.188, 6.16), (4.0, 3.0, 0.250, 8.04), (4.0, 3.0, 0.312, 9.89), (4.0, 3.0, 0.375, 11.7),
        (5.0, 3.0, 0.188, 7.05), (5.0, 3.0, 0.250, 9.21), (5.0, 3.0, 0.312, 11.32), (5.0, 3.0, 0.375, 13.4), (5.0, 3.0, 0.500, 17.3),
        (6.0, 2.0, 0.188, 6.16), (6.0, 2.0, 0.250, 8.04), (6.0, 2.0, 0.312, 9.89), (6.0, 2.0, 0.375, 11.7),
        (6.0, 3.0, 0.188, 7.94), (6.0, 3.0, 0.250, 10.38), (6.0, 3.0, 0.312, 12.77), (6.0, 3.0, 0.375, 15.1), (6.0, 3.0, 0.500, 19.5),
        (6.0, 4.0, 0.188, 8.83), (6.0, 4.0, 0.250, 11.55), (6.0, 4.0, 0.312, 14.20), (6.0, 4.0, 0.375, 16.8), (6.0, 4.0, 0.500, 21.6),
        (7.0, 4.0, 0.250, 12.89), (7.0, 4.0, 0.312, 15.86), (7.0, 4.0, 0.375, 18.8), (7.0, 4.0, 0.500, 24.2),
        (7.0, 5.0, 0.250, 14.23), (7.0, 5.0, 0.312, 17.52), (7.0, 5.0, 0.375, 20.7), (7.0, 5.0, 0.500, 26.6),
        (8.0, 3.0, 0.188, 9.61), (8.0, 3.0, 0.250, 12.55), (8.0, 3.0, 0.312, 15.44), (8.0, 3.0, 0.375, 18.3),
        (8.0, 4.0, 0.188, 10.50), (8.0, 4.0, 0.250, 13.73), (8.0, 4.0, 0.312, 16.90), (8.0, 4.0, 0.375, 20.0), (8.0, 4.0, 0.500, 25.8),
        (8.0, 6.0, 0.250, 16.57), (8.0, 6.0, 0.312, 20.42), (8.0, 6.0, 0.375, 24.2), (8.0, 6.0, 0.500, 31.0), (8.0, 6.0, 0.625, 38.2),
        (9.0, 3.0, 0.188, 10.50), (9.0, 3.0, 0.250, 13.73), (9.0, 3.0, 0.312, 16.90), (9.0, 3.0, 0.375, 20.0),
        (9.0, 5.0, 0.250, 16.57), (9.0, 5.0, 0.312, 20.42), (9.0, 5.0, 0.375, 24.2), (9.0, 5.0, 0.500, 31.0),
        (9.0, 7.0, 0.250, 18.91), (9.0, 7.0, 0.312, 23.30), (9.0, 7.0, 0.375, 27.6), (9.0, 7.0, 0.500, 35.4),
        (10.0, 2.0, 0.188, 10.50), (10.0, 2.0, 0.250, 13.73), (10.0, 2.0, 0.312, 16.90), (10.0, 2.0, 0.375, 20.0),
        (10.0, 4.0, 0.188, 12.28), (10.0, 4.0, 0.250, 16.07), (10.0, 4.0, 0.312, 19.80), (10.0, 4.0, 0.375, 23.4), (10.0, 4.0, 0.500, 30.2),
        (10.0, 6.0, 0.250, 18.91), (10.0, 6.0, 0.312, 23.30), (10.0, 6.0, 0.375, 27.6), (10.0, 6.0, 0.500, 35.4), (10.0, 6.0, 0.625, 43.7),
        (10.0, 8.0, 0.250, 21.25), (10.0, 8.0, 0.312, 26.18), (10.0, 8.0, 0.375, 31.0), (10.0, 8.0, 0.500, 39.7), (10.0, 8.0, 0.625, 48.9),
        (12.0, 4.0, 0.188, 13.95), (12.0, 4.0, 0.250, 18.24), (12.0, 4.0, 0.312, 22.48), (12.0, 4.0, 0.375, 26.6), (12.0, 4.0, 0.500, 34.3),
        (12.0, 6.0, 0.250, 21.25), (12.0, 6.0, 0.312, 26.18), (12.0, 6.0, 0.375, 31.0), (12.0, 6.0, 0.500, 39.7), (12.0, 6.0, 0.625, 48.9),
        (12.0, 8.0, 0.250, 23.59), (12.0, 8.0, 0.312, 29.06), (12.0, 8.0, 0.375, 34.4), (12.0, 8.0, 0.500, 44.1), (12.0, 8.0, 0.625, 54.3),
        (14.0, 4.0, 0.188, 15.62), (14.0, 4.0, 0.250, 20.41), (14.0, 4.0, 0.312, 25.16), (14.0, 4.0, 0.375, 29.8), (14.0, 4.0, 0.500, 38.4),
        (14.0, 6.0, 0.250, 23.59), (14.0, 6.0, 0.312, 29.06), (14.0, 6.0, 0.375, 34.4), (14.0, 6.0, 0.500, 44.1), (14.0, 6.0, 0.625, 54.3),
        (14.0, 10.0, 0.312, 35.82), (14.0, 10.0, 0.375, 42.4), (14.0, 10.0, 0.500, 54.4), (14.0, 10.0, 0.625, 67.0),
        (16.0, 4.0, 0.188, 17.29), (16.0, 4.0, 0.250, 22.58), (16.0, 4.0, 0.312, 27.84), (16.0, 4.0, 0.375, 33.0), (16.0, 4.0, 0.500, 42.4),
        (16.0, 8.0, 0.250, 28.27), (16.0, 8.0, 0.312, 34.82), (16.0, 8.0, 0.375, 41.2), (16.0, 8.0, 0.500, 52.8), (16.0, 8.0, 0.625, 65.0),
        (16.0, 12.0, 0.312, 41.58), (16.0, 12.0, 0.375, 49.2), (16.0, 12.0, 0.500, 63.0), (16.0, 12.0, 0.625, 77.6),
        (18.0, 6.0, 0.250, 28.27), (18.0, 6.0, 0.312, 34.82), (18.0, 6.0, 0.375, 41.2), (18.0, 6.0, 0.500, 52.8), (18.0, 6.0, 0.625, 65.0),
        (20.0, 4.0, 0.250, 27.28), (20.0, 4.0, 0.312, 33.64), (20.0, 4.0, 0.375, 39.9), (20.0, 4.0, 0.500, 51.2), (20.0, 4.0, 0.625, 63.1),
        (20.0, 8.0, 0.312, 40.64), (20.0, 8.0, 0.375, 48.1), (20.0, 8.0, 0.500, 61.7), (20.0, 8.0, 0.625, 76.0),
        (20.0, 12.0, 0.375, 56.3), (20.0, 12.0, 0.500, 72.2), (20.0, 12.0, 0.625, 89.0),
    ]
    
    for depth, width, wall, weight in rectangular_hss:
        depth_str = f"{depth:.1f}".rstrip('0').rstrip('.')
        width_str = f"{width:.1f}".rstrip('0').rstrip('.')
        wall_str = f"{wall:.3f}".rstrip('0').rstrip('.')
        designation = f"HSS{depth_str}X{width_str}X{wall_str}"
        desc = f"Rectangular HSS {designation} - {weight} lb/ft"
        add_material(db, designation, desc, "HSS", weight,
                    depth_inches=depth, width_inches=width, thickness_inches=wall,
                    unit_price_per_cwt=92.0)
        count += 1
    
    print(f"   Added {count} HSS materials")
    return count

def populate_additional_materials(db):
    """Populate additional specialty materials"""
    print("Populating Additional Specialty Materials...")
    
    # Pipe materials
    pipes = [
        ("PIPE1/2", "1/2\" Standard Steel Pipe", 0.85), ("PIPE3/4", "3/4\" Standard Steel Pipe", 1.13),
        ("PIPE1", "1\" Standard Steel Pipe", 1.68), ("PIPE1-1/4", "1-1/4\" Standard Steel Pipe", 2.27),
        ("PIPE1-1/2", "1-1/2\" Standard Steel Pipe", 2.72), ("PIPE2", "2\" Standard Steel Pipe", 3.65),
        ("PIPE2-1/2", "2-1/2\" Standard Steel Pipe", 5.79), ("PIPE3", "3\" Standard Steel Pipe", 7.58),
        ("PIPE3-1/2", "3-1/2\" Standard Steel Pipe", 9.11), ("PIPE4", "4\" Standard Steel Pipe", 10.79),
        ("PIPE5", "5\" Standard Steel Pipe", 14.62), ("PIPE6", "6\" Standard Steel Pipe", 18.97),
        ("PIPE8", "8\" Standard Steel Pipe", 28.55), ("PIPE10", "10\" Standard Steel Pipe", 40.48),
        ("PIPE12", "12\" Standard Steel Pipe", 53.56),
    ]
    
    count = 0
    for shape_key, desc, weight in pipes:
        add_material(db, shape_key, desc, "Pipe", weight, unit_price_per_cwt=89.0)
        count += 1
    
    # Bars and rods
    bars = [
        ("RD1/2", "1/2\" Round Bar", 0.67), ("RD5/8", "5/8\" Round Bar", 1.04), ("RD3/4", "3/4\" Round Bar", 1.50),
        ("RD7/8", "7/8\" Round Bar", 2.04), ("RD1", "1\" Round Bar", 2.67), ("RD1-1/8", "1-1/8\" Round Bar", 3.38),
        ("RD1-1/4", "1-1/4\" Round Bar", 4.17), ("RD1-3/8", "1-3/8\" Round Bar", 5.05), ("RD1-1/2", "1-1/2\" Round Bar", 6.01),
        ("RD1-5/8", "1-5/8\" Round Bar", 7.05), ("RD1-3/4", "1-3/4\" Round Bar", 8.18), ("RD2", "2\" Round Bar", 10.68),
        
        ("SQ1/2", "1/2\" Square Bar", 0.85), ("SQ5/8", "5/8\" Square Bar", 1.33), ("SQ3/4", "3/4\" Square Bar", 1.91),
        ("SQ7/8", "7/8\" Square Bar", 2.60), ("SQ1", "1\" Square Bar", 3.40), ("SQ1-1/4", "1-1/4\" Square Bar", 5.31),
        ("SQ1-1/2", "1-1/2\" Square Bar", 7.65), ("SQ2", "2\" Square Bar", 13.60),
        
        ("FB1/4X1", "1/4\" x 1\" Flat Bar", 0.85), ("FB1/4X2", "1/4\" x 2\" Flat Bar", 1.70),
        ("FB3/8X1", "3/8\" x 1\" Flat Bar", 1.28), ("FB3/8X2", "3/8\" x 2\" Flat Bar", 2.55),
        ("FB1/2X1", "1/2\" x 1\" Flat Bar", 1.70), ("FB1/2X2", "1/2\" x 2\" Flat Bar", 3.40),
        ("FB1/2X3", "1/2\" x 3\" Flat Bar", 5.10), ("FB1/2X4", "1/2\" x 4\" Flat Bar", 6.80),
        ("FB5/8X2", "5/8\" x 2\" Flat Bar", 4.25), ("FB3/4X2", "3/4\" x 2\" Flat Bar", 5.10),
    ]
    
    for shape_key, desc, weight in bars:
        category = "Round Bar" if shape_key.startswith("RD") else "Square Bar" if shape_key.startswith("SQ") else "Flat Bar"
        add_material(db, shape_key, desc, category, weight, unit_price_per_cwt=91.0)
        count += 1
    
    # Tube materials
    tubes = [
        ("TS1X1X1/8", "1\" x 1\" x 1/8\" Square Tube", 1.40),
        ("TS1-1/2X1-1/2X1/8", "1-1/2\" x 1-1/2\" x 1/8\" Square Tube", 2.08),
        ("TS2X2X1/8", "2\" x 2\" x 1/8\" Square Tube", 2.75),
        ("TS2X2X3/16", "2\" x 2\" x 3/16\" Square Tube", 3.99),
        ("TS3X3X1/4", "3\" x 3\" x 1/4\" Square Tube", 8.81),
        ("TS4X4X1/4", "4\" x 4\" x 1/4\" Square Tube", 11.97),
        ("TS2X4X1/4", "2\" x 4\" x 1/4\" Rectangular Tube", 9.42),
        ("TS3X6X1/4", "3\" x 6\" x 1/4\" Rectangular Tube", 13.38),
        ("TS4X6X1/4", "4\" x 6\" x 1/4\" Rectangular Tube", 14.83),
    ]
    
    for shape_key, desc, weight in tubes:
        add_material(db, shape_key, desc, "Tube", weight, unit_price_per_cwt=93.0)
        count += 1
    
    print(f"   Added {count} additional specialty materials")
    return count

def main():
    print("Capitol Engineering Company - Comprehensive Material Database Population")
    print("=" * 80)
    
    # Create tables
    create_tables()
    
    # Connect to database
    db = SessionLocal()
    
    try:
        # Clear existing materials
        clear_existing_materials()
        
        # Populate all material categories
        wf_count = populate_wide_flange_comprehensive(db)
        plate_count = populate_plates_comprehensive(db)  
        angle_count = populate_angles_comprehensive(db)
        channel_count = populate_channels_comprehensive(db)
        hss_count = populate_hss_comprehensive(db)
        additional_count = populate_additional_materials(db)
        
        # Commit all changes
        db.commit()
        
        total_count = wf_count + plate_count + angle_count + channel_count + hss_count + additional_count
        
        print("\n" + "=" * 80)
        print("COMPREHENSIVE MATERIAL DATABASE POPULATION COMPLETE!")
        print(f"   Total Materials: {total_count}")
        print(f"   Wide Flange: {wf_count}")
        print(f"   Plates: {plate_count}")
        print(f"   Angles: {angle_count}")
        print(f"   Channels: {channel_count}")
        print(f"   HSS: {hss_count}")
        print(f"   Additional: {additional_count}")
        print("=" * 80)
        
        # Show sample materials
        sample_materials = db.query(Material).limit(10).all()
        print("\nSample Materials:")
        for material in sample_materials:
            print(f"   - {material.shape_key}: {material.description}")
        
        print(f"\nProfessional material database ready for Capitol Engineering!")
        print(f"Frontend will now show ~{total_count} comprehensive material suggestions!")
        
    except Exception as e:
        db.rollback()
        print(f"Error populating database: {e}")
        raise
    finally:
        db.close()

if __name__ == "__main__":
    main()